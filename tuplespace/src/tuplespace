#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname tuplespace

main(_) ->
    Store = start_store(),
    start_server(Store).

%% --- Store process ---

start_store() ->
    spawn(fun() -> store_loop({[], []}) end).

store_loop(State) ->
    receive
        {put, Tuple, Pid} ->
            {RequestPids, State2} = store_put(Tuple, State),
            lists:foreach(fun(RequestPid) -> RequestPid ! {store, Tuple} end,
                          RequestPids),
            Pid ! {store, ok},
            store_loop(State2);
        {get, Pattern, Pid} ->
            {Tuples, State2} = store_get(Pattern, Pid, State),
            lists:foreach(fun(Tuple) -> Pid ! {store, Tuple} end, Tuples),
            store_loop(State2);
        {dump, Pattern, Pid} ->
            Tuples = store_dump(Pattern, State),
            Pid ! {store, Tuples},
            store_loop(State)
    end.

%% --- Store functionality ---

store_put(Tuple, {Tuples, Requests}) ->
    case find(request_matcher(Tuple), Requests) of
        nothing ->
            {[], {[Tuple|Tuples], Requests}};
        {_, RequestId} = Request ->
            {[RequestId], {Tuples, lists:delete(Request, Requests)}}
    end.

store_get(Pattern, RequestId, {Tuples, Requests}) ->
    case find(tuple_matcher(Pattern), Tuples) of
        nothing ->
            {[], {Tuples, [{Pattern, RequestId}|Requests]}};
        Tuple ->
            {[Tuple], {lists:delete(Tuple, Tuples), Requests}}
    end.

store_dump(Pattern, {Tuples, _}) ->
    lists:filter(tuple_matcher(Pattern), Tuples).

find(Pred, List) ->
    case lists:dropwhile(fun(X) -> not Pred(X) end, List) of
        [] -> nothing;
        [X|_] -> X
    end.

request_matcher(Tuple) ->
    fun({Pattern, _}) -> matches(Tuple, Pattern) end.

tuple_matcher(Pattern) ->
    fun(T) -> matches(T, Pattern) end.

matches(Tuple, Pattern) ->
     same_sizes(Tuple, Pattern) andalso elements_match(Tuple, Pattern).

same_sizes(List1, List2) ->
    length(List1) == length(List2).

elements_match(Tuple, Pattern) ->
    lists:all(fun({T, P}) -> (P == null) or (P == T) end,
              lists:zip(Tuple, Pattern)).

%% --- Server ---

start_server(Store) ->
    case gen_tcp:listen(5555, [binary, {active, true}]) of
        {ok, Socket} ->
            server_loop(Socket, Store);
        {error, eaddrinuse} ->
            timer:sleep(1000),
            start_server(Store)
    end.

server_loop(ListenSocket, Store) ->
    {ok, Socket} = gen_tcp:accept(ListenSocket),
    Handler = spawn(fun() -> handle_request(Socket, Store) end),
    gen_tcp:controlling_process(Socket, Handler),
    server_loop(ListenSocket, Store).

handle_request(Socket, Store) ->
    receive
        {tcp, Socket, DataIn} ->
            Request = jiffy:decode(DataIn),
            case Request of
                {[{<<"put">>, Tuple}]} ->
                    Store ! {put, Tuple, self()};
                {[{<<"get">>, Pattern}]} ->
                    Store ! {get, Pattern, self()};
                {[{<<"dump">>, Pattern}]} ->
                    Store ! {dump, Pattern, self()}
            end,
            handle_result(Socket);
        {tcp_closed, Socket} ->
            ok
    end.

handle_result(Socket) ->
    receive
        {store, ok} ->
            gen_tcp:send(Socket, <<"ok\n">>);
        {store, Tuple} ->
            Encoded = jiffy:encode({[{<<"result">>, Tuple}]}),
            gen_tcp:send(Socket, [Encoded, <<"\n">>]);
        {store, Tuples} ->
            Encoded = jiffy:encode({[{<<"result">>, Tuples}]}),
            gen_tcp:send(Socket, [Encoded, <<"\n">>]);
        {tcp_closed, Socket} ->
            ok
    end.
